?grep
d <- d[, grep("^[^filler]", names(d))]
d <- d[, grep("^[^filler]", names(data))]
data <- data[, grep("^[^filler]", names(data))]
sum(d[, 4])
sum(data[, 4])
View(data)
answer <- sum(data[,4])
answer
86.83*3
[0-9]+ (.*)[0-9]+
## Working with dates
d1 = date()
d1
class(d1)
s2 = Sys.Date()
class(d2)
d2 = Sys.Date()
class(d2)
format(d2, "%a" "%b" %c"")
format(d2, "%a "%b %c")
format(d2, "%a "%b %d")
format(d2, "%a "%b %d")
format(d2, "%a "%b %y")
format(d2, "%a "%b %y")
format(d2, "%a "%b %y")
x=c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z= as.Date(x, "%d%b%Y")
z
z[1]-z[2]
as.numeric(z[1-z[4]])
as.numeric(z[1]-z[4]])
as.numeric(z[1]-z[2]])
as.numeric(z[1]-z[2])
as.numeric(z[1]-z[4])
weedays(d2)
weekdays(d2)
months(d2)
julian(d2)
install.packages("lubridate")
library(lubridate)
ymd("20140108")
mdy("08/08/2015")
dmy("14/08/1988")
ymd_hms("14/08/1988 10:15:33")
ymd_hms("14-08-1988 10:15:33")
ymd_hms("2014-08-19 10:15:33")
ymd_hms("2014-08-19 10:15:33", tz = "Pacific/Auckland")
x=dmy(c("1jan1960", "2jan1960", "31mar1960", "30jul1960"))
wday(x[1])
wday(x[1], label = TRUE)
library(dplyr)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
if(file.exists("./data")){dir.create("./data")}
download.file(fileUrl, destfile = ".data/idaho_survey.csv", method = "auto")
download.file(fileUrl, destfile = ".idaho_survey.csv", method = "auto")
library(data.table)
getwd()
dataIdaho <- data.table(read.csv("idaho_survey.csv", stringsAsFactors = FALSE)
dataIdaho <- data.table(read.csv("idaho_survey.csv", stringsAsFactors = FALSE))
View(dataIdaho)
?strsplit
names(dataIdaho)
names <- names(dataIdaho)
strsplit(names, "wgtp")
strsplit(names, wgtp)
splittedData <- strsplit(names, "wgtp")
splittedData[123]
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl2, destfile = "GDP.csv", method = "auto")
dataGDP <- data.table(read.csv("GDP.csv", stringsAsFactors = FALSE))
View(dataGDP)
dataGDP <- data.table(read.csv("GDP.csv", skip = 4, stringsAsFactors = FALSE))
select(dataGDP, c("X", "X1", "X3", "X4"))
select(dataGDP, c(1, 2, 4, 5))
dataGDP <- select(dataGDP, c(1, 2, 4, 5))
?colnames
colnames(dataGDP) <- c("CountryCode", "RankGDP", "Country", "GDP")
names(dataGDP)
dataGDP$numGDP <- as.numeric(gsub(",","",dataGDP$GDP))
dataGDP <- data.table(read.csv("GDP.csv", skip = 4, nrows = 190, stringsAsFactors = FALSE))
dataGDP <- select(dataGDP, c(1, 2, 4, 5))
colnames(dataGDP) <- c("CountryCode", "RankGDP", "Country", "GDP")
names(dataGDP)
dataGDP$numGDP <- as.numeric(gsub(",","",dataGDP$GDP))
average <- mean(dataGDP$numGDP)
average
?grep
grep("United$",Country), 3
grep("United$",Country)
grep("United$", dataGDP$Country)
grep("*United$", dataGDP$Country)
grep("^United",dataGDP$Country)
grep("^United",dataGDP$Country)
length(grep("United$", dataGDP$Country))
length(grep("*United$", dataGDP$Country))
length(grep("^United",dataGDP$Country))
length(grep("^United",dataGDP$Country))
fileUrl3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl3, destfile = "GDP_2.csv", method = "auto")
fileUrl4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl4, destfile = "Educ.csv", method = "auto")
fileUrl3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl3, destfile = "GDP_2.csv", method = "auto")
fileUrl4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl4, destfile = "Educ.csv", method = "auto")
dataGDP2 <- data.table(read.csv("GDP.csv", skip = 4, nrows = 190, stringsAsFactors = FALSE))
dataGDP2 <- select(dataGDP2, c(1, 2, 4, 5))
colnames(dataGDP2) <- c("CountryCode", "RankGDP", "Country", "GDP")
names(dataGDP2)
dataEduc <- data.table(read.csv("Educ.csv", stringsAsFactors = FALSE))
View(dataEduc)
View(dataGDP)
View(dataEduc)
View(dataGDP2)
View(dataEduc)
?merge
dataEduc <- dataEduc[,c("CountryCode", "Special.Notes")]
fullData <- merge(dataGDP2,dataEduc, by.x = CountryCode, by.y = CountryCode)
fullData <- merge(dataGDP2,dataEduc, by.x = "CountryCode", by.y = "CountryCode")
View(fullData)
mergedData <- merge(dataGDP2,dataEduc, by.x = "CountryCode", by.y = "CountryCode")
?grep
?grpl
?grepl
length(grep("[Ff]iscal year end(*/)+ June" ), mergedData$Special.Notes)
length(grep("[Ff]iscal year end(*/)+ June", mergedData$Special.Notes))
length(grep("[Ff]iscal year (*/)+June", mergedData$Special.Notes))
length(grep("^[Ff]iscal year (*/)+June", mergedData$Special.Notes))
length(grep("^[Ff]iscal year end: (*/)+June", mergedData$Special.Notes))
length(grep("^[Ff]iscal year end:(*/)+June", mergedData$Special.Notes))
length(grepl("^[Ff]iscal year end:(*/)+June", mergedData$Special.Notes))
View(mergedData)
mergedData$Special.Notes[grepl("^Fiscal year end: June 30", mergedData$Special.Notes)]
length(grep("^Fiscal year end: June 30", mergedData$Special.Notes))
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes <- data.table(sampleTimes)
View(sampleTimes)
?POSIXlt
?grep
sampleTimes12 <- grep("^2012", sampleTimes)
sampleTimes12 <- sampleTimes[grep("^2012", sampleTimes)]
View(sampleTimes12)
?wday
sapply(sampleTimes12, wday)
sampleTimes12Mon <- sapply(sampleTimes12, wday)
sampleTimes12Mon <- data.table(sapply(sampleTimes12, wday))
View(sampleTimes12Mon)
sampleTimes12Mon <- data.table(sapply(sampleTimes12, wday(..., label = TRUE)))
sampleTimes12Mon <- data.table(sapply(sampleTimes12, wday(... , label = TRUE)))
sampleTimes12Mon <- data.table(sapply(sampleTimes12, wday(label = TRUE)))
sampleTimes12Mon <- data.table(sapply(sampleTimes12, wday))
wday(sampleTimes12Mon, label = TRUE)
sampleTimes12Mon <- data.table(sapply(sampleTimes12, weekdays))
View(sampleTimes12Mon)
?n
MOndays <- length(sampleTimes12Mon[grepl("segunda-feira", sampleTimes12Mon)])
MOndays
length(sampleTimes12Mon[grepl("segunda-feira", sampleTimes12Mon$sampleTimes)])
length(sampleTimes12Mon[grep("segunda-feira", sampleTimes12Mon$sampleTimes)])
length(sampleTimes12Mon(grep("segunda-feira", sampleTimes12Mon$sampleTimes)))
sampleTimes12Mon(grep("segunda-feira", sampleTimes12Mon$sampleTimes))
length(which(wday(sampleTimes12Mon, label = T) == "segunda-feira"))
length(which(sampleTimes12Mon$sampleTimes == "segunda-feira"))
Mondays <- length(which(sampleTimes12Mon$sampleTimes == "segunda-feira"))
Mondays
36.92/6
library(ggplot2)
testdat <- data.frame(x = 1:100, y = rnorm(100))
plot(testdat$x, testdat$y, type = 'l', ylim = c(-3,3))
testdat[50,2] <- 100
plot(testdat$x, testdat$y, type = 'l', ylim = c(-3,3))
library(ggplot2)
g <- ggplot(testdat, aes(x = x, y = y))
g + geom_line()
g + geom_line + ylim(-3,3)
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(3,-3))
set.seed(12345)
par(mar = rep (0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed(678910)
set.seed(678910)
for (i in 1:40){
#flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if a coin is heads add a common pattern to the row
if (coinFlip){
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0, 3), each = 5)
}
}
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix):1])
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order,]
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
20.57/1870
install.packages("knitr")
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam)
str(spam[,1:5])
set.seed(3435)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)  # coinflip to select half of the data set
table(trainIndicator)
train$Spam = spam[trainIndicator == 1, ]
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot((trainSpam$capitalAve ~ trainSpam$type))
plot((trainSpam$capitalAve ~ trainSpam$type))
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type) # capitalAve = averaga number of capital letters
plot(log10(trainSpam[,1:4]+1))
hCluster = hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:57]+1))))
plot(hClusterUpdated)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
library(boot)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmfit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmfit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
prodictedSpam[predictionModel$fitted > 0.5 ] = "spam"
predictedSpam[predictionModel$fitted > 0.5 ] = "spam"
table(predictedSpam, testSpam$type)
(61+449)/(1346 + 61 + 458 + 449)
(61+458)/(1346 + 61 + 458 + 449)
getwd()
setwd("C:/Users/Marcelo/Desktop/Coursera/Data-Science-Specialization/RepData_PeerAssessment1/")
?unzip
?download.file
setwd("C:/Users/Marcelo/Desktop/Coursera/Data-Science-Specialization/RepData_PeerAssessment1/")
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url,activity.zip, method = "auto")
download.file(url,"activity.zip", method = "auto")
unzip("activity.zip")
data <- read.csv("activity.csv", header = TRUE, stringsAsFactors = FALSE)
str(data)
View(data)
summary(data)
View(data)
data$days <- weekdays(as.Date(data$date))
library(plyr)
data$date <- as.Date(data$date)
library(dplyr)
steps_per_day <- data %>%
group_by(date)%>%
summarise(total_steps = sum(steps, na.rm = TRUE))
steps_per_day
library(ggplot2)
View(steps_per_day)
View(steps_per_day)
View(steps_per_day)
ggplot(steps_per_day, aes(x = factor(date), y = total_steps))+
geom_bar()
View(steps_per_day)
ggplot(steps_per_day, aes(x = date, y = total_steps))+
geom_bar()
ggplot(steps_per_day, aes(x = date, y = total_steps))+
geom_bar(stat = "identity")
ggplot(steps_per_day, aes(x = factor(date), y = total_steps))+
geom_bar(stat = "identity")
ggplot(steps_per_day, aes(x = date, y = total_steps))+
geom_bar(stat = "identity")
ggplot(steps_per_day, aes(x = date, y = total_steps, fill = "blue",
label = round(total_steps,0)))+
geom_bar(stat = "identity")
ggplot(steps_per_day, aes(x = date, y = total_steps,
label = round(total_steps,0)))+
geom_bar(stat = "identity")+
geom_label(aes(fill = type), colour = "white", fontface = "bold")
ggplot(steps_per_day, aes(x = date, y = total_steps,
label = round(total_steps,0)))+
geom_bar(stat = "identity")+
geom_label(colour = "white", fontface = "bold")
ggplot(steps_per_day, aes(x = date, y = total_steps,
label = round(total_steps,0)))+
geom_bar(stat = "identity")+
geom_label()
ggplot(steps_per_day, aes(x = date, y = total_steps))+
geom_bar(stat = "identity", col = "blue")+
geom_label()
ggplot(steps_per_day, aes(x = date, y = total_steps))+
geom_bar(stat = "identity", col = "blue")+
ggplot(pm25_Maryland_type_year, aes(x = factor(year), y = Emissions,
fill = type, label = round(Emissions,2)))+
geom_bar(stat = "identity")+
facet_grid(. ~ type) +
xlab("Year")+
ylab("Total PM 2.5 Emissions")+
ggtitle("Pm 2.5 emissions in Baltimore City by sources")+
geom_label(aes(fill = type), colour = "white", fontface = "bold")
ggplot(steps_per_day, aes(x = date, y = total_steps))+
geom_bar(stat = "identity", col = "blue")
ggplot(steps_per_day, aes(x = date, y = total_steps))+
geom_bar(stat = "identity", col = "blue", fill = "blue")
ggplot(steps_per_day, aes(x = date, y = total_steps))+
geom_bar(stat = "identity", col = "black", fill = "gray")
ggplot(steps_per_day, aes(x = date, y = total_steps))+
geom_bar(stat = "identity", col = "black", fill = "gray")+
xlab("Days")+
ylab("Total Steps")+
ggtitle("Total Number of Steps Taken Each Day")
mean_median_steps <- data %>%
group_by(date) %>%
summarise(mean_steps = mean(steps, na.rm = FALSE))
mean_median_steps
mean_median_steps <- data %>%
group_by(date) %>%
summarise(mean_steps = mean(steps, na.rm = FALSE)) %>%
summarise(median_steps = median(steps, na.rm = FALSE))
?median
mean_median_steps <- data %>%
group_by(date) %>%
summarise(mean = mean(steps, na.rm = FALSE)) %>%
summarise(median = median(steps, na.rm = FALSE))
mean_median_steps <- data %>%
group_by(date) %>%
summarise(mean = mean(steps, na.rm = FALSE)) %>%
group_by(date) %>%
summarise(median = median(steps, na.rm = FALSE))
mean_median_steps <- group_by(data, date) %>%
summarise(mean = mean(steps, na.rm = FALSE)) %>%
summarise(median = median(steps, na.rm = FALSE))
mean_median_steps <- group_by(data, date) %>%
summarise(median = median(steps, na.rm = FALSE))
View(mean_median_steps)
mean_median_steps <- group_by(data, date) %>%
summarise(median = median(steps, na.rm = FALSE)) %>%
summarise(mean = mean(steps, na.rm = FALSE))
mean_median_steps <- data %>%
group_by(date) %>%
summarise(mean = mean(steps, na.rm = FALSE),
median = median(steps, na.rm = FALSE))
mean_median_steps
?mean
min_5_int <- data %>%
group_by(interval)%>%
summarise(avg = mean(steps, na.rm = TRUE))
min_5_int
View(min_5_int)
ggplot(min_5_int, aes(x = interval, y = avg))+
geom_line()
?geom_line
ggplot(min_5_int, aes(x = interval, y = avg))+
geom_line()+
xlab("5-minute interval")+
ylab("Avg Steps")
?max
?which.max
min_5_int[which.max(min_5_int[,2]),1]
min_5_int[which.max(min_5_int[,2])]
min_5_int[which.max(min_5_int$avg)]
min_5_int$interval[which.max(min_5_int$avg)]
rowsum(data, is.na(data))
is.na(data)
is.na(data[,1])
sum(is.na(data[,1]))
sum(is.na(data))
for (i in ncol(data)){
print(i,sum(is.na(data[,i])) )
}
View(data)
for (i in ncol(data)){
na[i] = sum(is.na(data[,i]))
print(i, na)
}
for (i in ncol(data)){
na[i] = sum(is.na(data[,i]))
print(i, na[i])
}
sum(is.na(data[,i]))
sum(is.na(data))
?gsub
data_copy <- data
setwd("C:/Users/Marcelo/Desktop/Coursera/Data-Science-Specialization/RepData_PeerAssessment1/")
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url,"activity.zip", method = "auto")
unzip("activity.zip")
data <- read.csv("activity.csv", header = TRUE, stringsAsFactors = FALSE)
str(data)
summary(data)
library(dplyr)
data$date <- as.Date(data$date)
steps_per_day <- data %>%
group_by(date)%>%
summarise(total_steps = sum(steps, na.rm = TRUE))
steps_per_day
library(ggplot2)
ggplot(steps_per_day, aes(x = date, y = total_steps))+
geom_bar(stat = "identity", col = "black", fill = "gray")+
xlab("Days")+
ylab("Total Steps")+
ggtitle("Total Number of Steps Taken Each Day")
mean_median_steps <- data %>%
group_by(date) %>%
summarise(mean = mean(steps, na.rm = FALSE),
median = median(steps, na.rm = FALSE))
mean_median_steps
min_5_int <- data %>%
group_by(interval)%>%
summarise(avg = mean(steps, na.rm = TRUE))
ggplot(min_5_int, aes(x = interval, y = avg))+
geom_line()+
xlab("5-minute interval")+
ylab("Avg Steps")
min_5_int$interval[which.max(min_5_int$avg)]
sum(is.na(data))
data_copy <- data
for(i in nrow(data_copy)){
if(is.na(data_copy$steps[i])){
data_copy$steps[i] =
}
}
sum(is.na(data_copy))
View(data_copy)
?daymeans
for(i in nrow(data_copy)){
if(is.na(data_copy$steps[i])){
data_copy$steps[i] = tapply(data_copy$steps, data_copy$interval,
mean, na.rm = TRUE, simplify = TRUE)
}
}
for(i in nrow(data_copy)){
if(is.na(data_copy$steps[i])){
data_copy$steps[i] <- tapply(data_copy$steps, data_copy$interval,
mean, na.rm = TRUE, simplify = TRUE)
}
}
sum(is.na(data_copy))
NAs <- is.na(data_copy$steps)
avg_int <- tapply(data_copy$steps, data_copy$interval, mean,
na.rm = TRUE, simplify = TRUE)
data_copy$steps[NAs] <- avg_int(as.character(data_copy$interval[NAs]))
data_copy$steps[NAs] <- avg_int[as.character(data_copy$interval[NAs])]
sum(is.na(data_copy))
steps_per_day_2 <- data_copy %>%
group_by(date_copy)%>%
summarise(total_steps = sum(steps, na.rm = TRUE))
steps_per_day_2 <- data_copy %>%
group_by(date)%>%
summarise(total_steps = sum(steps, na.rm = TRUE))
steps_per_day_2
ggplot(steps_per_day_2, aes(x = date, y = total_steps))+
geom_bar(stat = "identity", col = "black", fill = "gray")+
xlab("Days")+
ylab("Total Steps")+
ggtitle("Total Number of Steps Taken Each Day")
mean_median_steps_2 <- data_copy %>%
group_by(date) %>%
summarise(mean = mean(steps, na.rm = FALSE),
median = median(steps, na.rm = FALSE))
mean_median_steps_2
View(steps_per_day)
View(steps_per_day_2)
summary(steps_per_day)
summary(steps_per_day_2)
?weekdays
?ifelse
data_copy <- data_copy%>%
mutate(wdays = ifelse(weekdays(data_copy$date) == "Sábado" |
weekdays(data_copy$date) == "Domingo",
"Weekends", "Weekday"))
steps_per_weekdays <- data_copy %>%
group_by(wdays)%>%
summarise(avg_steps = mean(steps, na.rm = TRUE))
steps_per_weekdays
View(steps_per_weekdays)
?weekdays
weekdays("2017-02-23")
weekdays(character("2017-02-23"))
data_copy <- data_copy%>%
mutate(wdays = ifelse(weekdays(data_copy$date) == "sábado" |
weekdays(data_copy$date) == "domingo",
"Weekends", "Weekday"))
steps_per_weekdays <- data_copy %>%
group_by(wdays, interval)%>%
summarise(avg_steps = mean(steps, na.rm = TRUE))
steps_per_weekdays
View(steps_per_weekdays)
ggplot(steps_per_weekdays, aes(x = interval, y = avg_steps))+
geom_line()+
xlab("5-minute interval")+
ylab("Average Steps")+
facet_grid(wdays~.)
